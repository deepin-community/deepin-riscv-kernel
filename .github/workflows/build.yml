name: build-kernel

on:
  push:
  schedule:
    - cron: "0 2 * * *"
  pull_request:
  workflow_dispatch:

env:
  CROSS_COMPILE: riscv64-linux-gnu-
  ARCH: riscv
  KBUILD_BUILD_USER: deepin-riscv-sig
  KBUILD_BUILD_HOST: deepin-riscv-builder
  KDEB_COMPRESS: xz
  KDEB_CHANGELOG_DIST: unstable
  OUT_DIR: out
  email: deepin-riscv@deepin.org

permissions:
  pull-requests: read

jobs:
  build-kernel:
    strategy:
      fail-fast: false
      matrix:
        include:
          - board: unmatched
            kernel_branch: linux-6.4.y
            kernel_git: git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
            kernel_config: defconfig

          - board: star64
            kernel_branch: star64-5.15
            kernel_git: https://github.com/Icenowy/linux.git
            kernel_config: star64_defconfig

          - board: visionfive2
            kernel_branch: JH7110_VisionFive2_devel
            kernel_git: https://github.com/starfive-tech/linux.git
            kernel_config: starfive_visionfive2_defconfig

          - board: mango
            kernel_branch: sg2042-dev
            kernel_git: https://github.com/sophgo/linux-riscv.git
            kernel_config: sophgo_mango_ubuntu_defconfig

          - board: th1520
            kernel_branch: lpi4a
            kernel_git: https://github.com/revyos/thead-kernel.git
            kernel_config: revyos_defconfig

    runs-on: ubuntu-latest
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - uses: actions/checkout@v3
      - name: "Install Deps"
        run: |
          sudo apt update
          sudo apt install -y gdisk dosfstools g++-12-riscv64-linux-gnu build-essential \
                        libncurses-dev gawk flex bison openssl libssl-dev \
                        dkms libelf-dev pahole libudev-dev libpci-dev libiberty-dev autoconf mkbootimg \
                        fakeroot genext2fs genisoimage libconfuse-dev mtd-utils mtools qemu-utils qemu-utils squashfs-tools \
                        device-tree-compiler rauc simg2img u-boot-tools f2fs-tools arm-trusted-firmware-tools swig debhelper
          sudo update-alternatives --install /usr/bin/riscv64-linux-gnu-gcc riscv64-gcc /usr/bin/riscv64-linux-gnu-gcc-12 10
          sudo update-alternatives --install /usr/bin/riscv64-linux-gnu-g++ riscv64-g++ /usr/bin/riscv64-linux-gnu-g++-12 10
          git config --global user.email $email
          git config --global user.name $KBUILD_BUILD_USER

      - name: "Clone Kernel"
        run: git clone --depth=1 -b ${{ matrix.kernel_branch }} ${{ matrix.kernel_git }} kernel

      - name: "Compile kernel"
        run: |
          pushd kernel
            # fix unmatched
            if [[ ${{ matrix.board }} = 'unmatched' ]]; then
              wget https://salsa.debian.org/kernel-team/linux/-/raw/master/debian/config/riscv64/config
              cat config >> arch/riscv/configs/${{ matrix.kernel_config }}
            fi
            
            # fix lpi4a
            if [[ ${{ matrix.board }} = 'th1520' ]]; then
              sed -i '/UART/d' ../common_driver_defconfig
            fi
            
            # fix drivers
            cat ../common_driver_defconfig >> arch/riscv/configs/${{ matrix.kernel_config }}

            # enable all bpf feature
            cat ../bpf_defconfig >> arch/riscv/configs/${{ matrix.kernel_config }}
            # enable all cgroup feature
            cat ../cgroup_defconfig >> arch/riscv/configs/${{ matrix.kernel_config }}
            # enable CONFIG_DEBUG_INFO_DWARF5 to generate dbg deb with dwarf5 format
            echo CONFIG_DEBUG_INFO_DWARF5=y >> arch/riscv/configs/${{ matrix.kernel_config }}
            make CROSS_COMPILE=${CROSS_COMPILE} ARCH=${ARCH} ${{ matrix.kernel_config }}

            if [ -f ../config/${board}/kernelconfig ]; then
              cp -v ../config/${board}/kernelconfig .config
            fi
                        
            sed -i '/CONFIG_LOCALVERSION_AUTO/d' .config && echo "CONFIG_LOCALVERSION_AUTO=n" >> .config
            make CROSS_COMPILE=${CROSS_COMPILE} ARCH=${ARCH} bindeb-pkg -j$(nproc) LOCALVERSION="-${{ matrix.board }}"
          popd

      - name: 'Upload Kernel Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: kernel-${{ matrix.board }}-deb
          path: "*.deb"
          retention-days: 3
  
  build-u-boot:
    strategy:
      fail-fast: false
      matrix:
        include:
          - board: unmatched
            opensbi_branch: v1.2
            opensbi_git: https://github.com/riscv-software-src/opensbi.git
            uboot_branch: v2023.04
            uboot_git: https://github.com/u-boot/u-boot.git
            uboot_config: sifive_unmatched_defconfig

    runs-on: ubuntu-latest
    steps:
      - name: "Install Deps"
        run: |
          sudo apt update
          sudo apt install -y gdisk dosfstools g++-12-riscv64-linux-gnu build-essential \
                        libncurses-dev gawk flex bison openssl libssl-dev \
                        dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf mkbootimg \
                        fakeroot genext2fs genisoimage libconfuse-dev mtd-utils mtools qemu-utils qemu-utils squashfs-tools \
                        device-tree-compiler rauc simg2img u-boot-tools f2fs-tools arm-trusted-firmware-tools swig
          sudo update-alternatives --install /usr/bin/riscv64-linux-gnu-gcc riscv64-gcc /usr/bin/riscv64-linux-gnu-gcc-12 10
          sudo update-alternatives --install /usr/bin/riscv64-linux-gnu-g++ riscv64-g++ /usr/bin/riscv64-linux-gnu-g++-12 10
          git config --global user.email $email
          git config --global user.name $KBUILD_BUILD_USER

      - name: out
        run: mkdir ${OUT_DIR}

      - name: "Clone opensbi"
        run: git clone --depth=1 -b ${{ matrix.opensbi_branch }} ${{ matrix.opensbi_git }} opensbi

      - name: "Compile opensbi"
        run: |
          pushd opensbi
            make CROSS_COMPILE="${CROSS_COMPILE}" PLATFORM=generic
          popd
          cp opensbi/build/platform/generic/firmware/fw_dynamic.bin ${OUT_DIR}

      - name: "Clone u-boot"
        run: git clone --depth=1 -b ${{ matrix.uboot_branch }} ${{ matrix.uboot_git }} u-boot

      - name: "Compile u-boot"
        run: |
          pushd u-boot
            make CROSS_COMPILE="${CROSS_COMPILE}" ARCH="${ARCH}" ${{ matrix.uboot_config }}
            make CROSS_COMPILE="${CROSS_COMPILE}" ARCH="${ARCH}" OPENSBI="../${OUT_DIR}/fw_dynamic.bin" -j$(nproc)

            if [[ ${{ matrix.board }} = 'unmatched' ]]; then
              cp -v spl/u-boot-spl.bin "../${OUT_DIR}"
              cp -v u-boot.itb "../${OUT_DIR}"
            else
              echo "No board"
              exit -1
            fi
          popd
          
      - name: 'Upload u-boot Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: u-boot-${{ matrix.board }}
          path: "${OUT_DIR}/*"
          retention-days: 3
