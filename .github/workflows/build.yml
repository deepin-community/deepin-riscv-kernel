name: build-kernel

on:
  push:
  schedule:
    - cron: "0 2 * * *"
  pull_request:
  workflow_dispatch:

env:
  CROSS_COMPILE: riscv64-linux-gnu-
  # for ccache
  GCC: riscv64-linux-gnu-gcc
  GCC_VERSION: 12
  CCACHE_DIR: /tmp/runnerccache
  CCACHE_COMPILERTYPE: gcc
  ARCH: riscv
  KBUILD_BUILD_USER: deepin-riscv-sig
  KBUILD_BUILD_HOST: deepin-riscv-builder
  KDEB_COMPRESS: xz
  KDEB_CHANGELOG_DIST: unstable
  OUT_DIR: out
  email: deepin-riscv@deepin.org

permissions:
  pull-requests: read

jobs:
  build-kernel:
    strategy:
      fail-fast: false
      matrix:
        include:
          - board: unmatched
            kernel_branch: linux-6.6.y
            kernel_git: git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
            kernel_config: defconfig

          - board: star64
            kernel_branch: star64-5.15
            kernel_git: https://github.com/Icenowy/linux.git
            kernel_config: star64_defconfig

          - board: visionfive2
            kernel_branch: JH7110_VisionFive2_devel
            kernel_git: https://github.com/starfive-tech/linux.git
            kernel_config: starfive_visionfive2_defconfig

          - board: visionfive2-61y
            kernel_branch: JH7110_VisionFive2_6.1.y_devel
            kernel_git: https://github.com/starfive-tech/linux.git
            kernel_config: starfive_visionfive2_defconfig
            kernel_patchset: visionfive2

          - board: visionfive2-66y
            kernel_branch: JH7110_VisionFive2_6.6.y_devel
            kernel_git: https://github.com/starfive-tech/linux.git
            kernel_config: starfive_visionfive2_defconfig
            kernel_patchset: visionfive2

          - board: mango
            kernel_branch: sg2042-dev
            kernel_git: https://github.com/sophgo/linux-riscv.git
            kernel_config: sophgo_mango_ubuntu_defconfig

          - board: th1520
            kernel_branch: lpi4a
            kernel_git: https://github.com/revyos/thead-kernel.git
            kernel_config: revyos_defconfig

          - board: milkv-mars
            kernel_branch: dev
            kernel_git: https://github.com/milkv-mars/mars-buildroot-sdk.git
            kernel_config: starfive_visionfive2_defconfig
            subdirectory: linux

          - board: spacemit-k1
            kernel_branch: spacemit-k1
            kernel_git: https://github.com/YukariChiba/linux
            kernel_config: k1_defconfig

          - board: pinetab-v
            kernel_branch: Star64_devel
            kernel_git: https://github.com/Fishwaldo/Star64_linux
            kernel_config: pine64_pinetabv_defconfig

          - board: eic7700
            kernel_branch: linux-6.6.18-EIC7X
            kernel_git: https://github.com/eswincomputing/linux-stable
            kernel_config: win2030_defconfig

    runs-on: ubuntu-latest
    steps:
      - name: "Update APT sources"
        run: |
          sudo apt update

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: true
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - uses: actions/checkout@v3
      - name: "Install Deps"
        env:
          GCC_VER_OVERRIDE: ${{ matrix.gcc_version }}
        run: |
          test $GCC_VER_OVERRIDE && export GCC_VER=$GCC_VER_OVERRIDE || export GCC_VER=${{ env.GCC_VERSION }}
          sudo apt install -y gdisk dosfstools g++-${GCC_VER}-riscv64-linux-gnu build-essential \
                        libncurses-dev gawk flex bison openssl libssl-dev \
                        dkms libelf-dev pahole libudev-dev libpci-dev libiberty-dev autoconf mkbootimg \
                        fakeroot genext2fs genisoimage libconfuse-dev mtd-utils mtools squashfs-tools \
                        device-tree-compiler rauc simg2img u-boot-tools swig ccache debhelper

          sudo update-alternatives --install /usr/bin/riscv64-linux-gnu-gcc riscv64-gcc /usr/bin/riscv64-linux-gnu-gcc-${GCC_VER} 10
          sudo update-alternatives --install /usr/bin/riscv64-linux-gnu-g++ riscv64-g++ /usr/bin/riscv64-linux-gnu-g++-${GCC_VER} 10
          git config --global user.email $email
          git config --global user.name $KBUILD_BUILD_USER
          # prepare ccache
          mkdir -p $CCACHE_DIR
          # we need to blance cache size between board
          ccache -F 0 -M 1GiB
          # try give mango more cache size
          if [[ ${{ matrix.board }} = 'mango' ]]; then
              ccache -F 0 -M 4GiB
          fi
          ccache -s
  
      # https://github.com/actions/cache/blob/main/restore/README.md
      - name: Restore linux build cache
        id: restore
        uses: actions/cache/restore@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-kernel-${{ matrix.board }}-${{ env.GCC }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-kernel-${{ matrix.board }}-${{ env.GCC }}-
            ${{ runner.os }}-kernel-${{ matrix.board }}-

      - name: "Clone Kernel"
        run: |
          export GIT_CLONE_PROTECTION_ACTIVE=false
          git clone --depth=1 -b ${{ matrix.kernel_branch }} ${{ matrix.kernel_git }} kernel

      - name: "Move Kernel Subdirectory"
        if: ${{ matrix.subdirectory }}
        run: |
          mv kernel kernel-git
          mv kernel-git/${{ matrix.subdirectory }} ./kernel

      - name: "Apply patches (if any)"
        env:
          PATCHSET_OVERRIDE: ${{ matrix.kernel_patchset }}
        run: |
          if [ -d patches/common ]; then
            for patchfile in patches/common/*.patch; do
              patch -d ./kernel -p1 < $patchfile
            done
          fi
          test $PATCHSET_OVERRIDE && export PATCHSET=$PATCHSET_OVERRIDE || export PATCHSET=${{ matrix.board }}
          if [ -d patches/"$PATCHSET" ]; then
            for patchfile in patches/"$PATCHSET"/*.patch; do
              patch -d ./kernel -p1 < $patchfile
            done
          fi

      - name: "Compile kernel"
        run: |
          pushd kernel
            # fix unmatched
            if [[ ${{ matrix.board }} = 'unmatched' ]]; then
              wget https://salsa.debian.org/kernel-team/linux/-/raw/master/debian/config/riscv64/config
              cat config >> arch/riscv/configs/${{ matrix.kernel_config }}
            fi
            # add ccache and create .config
            make CROSS_COMPILE="ccache ${CROSS_COMPILE}" ARCH=${ARCH} ${{ matrix.kernel_config }}
            
            if [[ ${{ matrix.board }} = 'visionfive2'* ]]; then
              cat ../gpu_driver_defconfig >> .tmpconfig
              echo "CONFIG_IIO_BUFFER=y" >> .tmpconfig
            fi

            # fix lpi4a drivers in common_driver_defconfig
            if [[ ${{ matrix.board }} = 'th1520' ]]; then
              sed -i '/UART/d' ../common_driver_defconfig
              sed -i '/80211/d' ../common_driver_defconfig
            fi
        
            # fix drivers
            cat ../common_driver_defconfig >> .tmpconfig
            # enable net subsystem feature
            cat ../net_defconfig >> .tmpconfig
            # enable all bpf feature
            cat ../bpf_defconfig >> .tmpconfig
            # enable all cgroup feature
            cat ../cgroup_defconfig >> .tmpconfig
            # enable CONFIG_DEBUG_INFO_DWARF5 to generate dbg deb with dwarf5 format
            echo CONFIG_DEBUG_INFO_DWARF5=y >> .tmpconfig
            
            # merge to .config
            if [[ ${{ matrix.board }} != 'spacemit-k1' ]]; then
              scripts/kconfig/merge_config.sh -m .config .tmpconfig
            fi
            
            # override .config if ../config/${board}/kernelconfig file exist
            if [ -f ../config/${board}/kernelconfig ]; then
              cp -v ../config/${board}/kernelconfig .config
            fi
            
            # version config
            sed -i '/CONFIG_LOCALVERSION_AUTO/d' .config && echo "CONFIG_LOCALVERSION_AUTO=n" >> .config
            # If config restart, use default config
            make CROSS_COMPILE="ccache ${CROSS_COMPILE}" ARCH=${ARCH} olddefconfig
            # add ccache
            make CROSS_COMPILE="ccache ${CROSS_COMPILE}" ARCH=${ARCH} bindeb-pkg -j$(nproc) LOCALVERSION="-${{ matrix.board }}"
          popd

      - name: Built Extra Module (if any)
        run: |
          mkdir -p extra-modules
          if [[ ${{ matrix.board }} = 'visionfive2'* ]]; then
            git clone https://github.com/starfive-tech/soft_3rdpart.git 3rdpart
            for vdrv in wave511 wave420l; do
              pushd 3rdpart/$vdrv/code
              make -C ${{ github.workspace }}/kernel M=$(pwd)/vdi/linux/driver \
                LDDINCDIR=$(pwd)/vdi/linux/driver/../include \
                CROSS_COMPILE="${CROSS_COMPILE}" \
                ARCH=${ARCH} modules
              cp ./vdi/linux/driver/*.ko ${{ github.workspace }}/extra-modules
              popd
            done

            pushd 3rdpart/codaj12/jdi/linux/driver
              make -C ${{ github.workspace }}/kernel M=$(pwd) \
                LDDINCDIR=$(pwd)/../include \
                CROSS_COMPILE="${CROSS_COMPILE}" \
                ARCH=${ARCH} modules
              cp ./*.ko ${{ github.workspace }}/extra-modules
            popd
          fi

      - name: Check ccache
        run: |
          ccache -s
          du -hd0 $CCACHE_DIR

      # https://github.com/actions/cache/blob/main/save/README.md
      - name: Save linux build cache
        id: cache
        if: ${{ github.event_name }} == "workflow_dispatch"
        uses: actions/cache/save@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-kernel-${{ matrix.board }}-${{ env.GCC }}-${{ github.sha }}

      - name: 'Upload Kernel Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: kernel-${{ matrix.board }}-deb
          path: "*.deb"
          retention-days: 3
  
      - name: 'Upload Extra Kernel Modules Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: kernel-${{ matrix.board }}-extra-modules
          if-no-files-found: "ignore"
          path: "extra-modules"
          retention-days: 3

  build-u-boot:
    strategy:
      fail-fast: false
      matrix:
        include:
          - board: unmatched
            opensbi_branch: v1.4
            opensbi_git: https://github.com/riscv-software-src/opensbi.git
            uboot_branch: v2024.07-rc2
            uboot_git: https://github.com/u-boot/u-boot.git
            uboot_config: sifive_unmatched_defconfig

    runs-on: ubuntu-latest
    steps:
      - name: "Install Deps"
        run: |
          sudo apt update
          sudo apt install -y gdisk dosfstools g++-12-riscv64-linux-gnu build-essential \
                        libncurses-dev gawk flex bison openssl libssl-dev \
                        dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf mkbootimg \
                        fakeroot genext2fs genisoimage libconfuse-dev mtd-utils mtools qemu-utils qemu-utils squashfs-tools \
                        device-tree-compiler rauc simg2img u-boot-tools f2fs-tools arm-trusted-firmware-tools swig
          sudo update-alternatives --install /usr/bin/riscv64-linux-gnu-gcc riscv64-gcc /usr/bin/riscv64-linux-gnu-gcc-12 10
          sudo update-alternatives --install /usr/bin/riscv64-linux-gnu-g++ riscv64-g++ /usr/bin/riscv64-linux-gnu-g++-12 10
          git config --global user.email $email
          git config --global user.name $KBUILD_BUILD_USER

      - name: out
        run: mkdir ${OUT_DIR}

      - name: "Clone opensbi"
        run: git clone --depth=1 -b ${{ matrix.opensbi_branch }} ${{ matrix.opensbi_git }} opensbi

      - name: "Compile opensbi"
        run: |
          pushd opensbi
            make CROSS_COMPILE="${CROSS_COMPILE}" PLATFORM=generic
          popd
          cp opensbi/build/platform/generic/firmware/fw_dynamic.bin ${OUT_DIR}

      - name: "Clone u-boot"
        run: git clone --depth=1 -b ${{ matrix.uboot_branch }} ${{ matrix.uboot_git }} u-boot

      - name: "Compile u-boot"
        run: |
          pushd u-boot
            make CROSS_COMPILE="${CROSS_COMPILE}" ARCH="${ARCH}" ${{ matrix.uboot_config }}
            make CROSS_COMPILE="${CROSS_COMPILE}" ARCH="${ARCH}" OPENSBI="../${OUT_DIR}/fw_dynamic.bin" -j$(nproc)

            if [[ ${{ matrix.board }} = 'unmatched' ]]; then
              cp -v spl/u-boot-spl.bin "../${OUT_DIR}"
              cp -v u-boot.itb "../${OUT_DIR}"
            else
              echo "No board"
              exit -1
            fi
          popd
          
      - name: 'Upload u-boot Artifact'
        uses: actions/upload-artifact@v3
        with:
          name: u-boot-${{ matrix.board }}
          path: "${{ env.OUT_DIR }}/*"
          retention-days: 3
